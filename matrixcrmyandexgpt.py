import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT
IAM_TOKEN = ""
CATALOG_ID = ""
MODEL_URI = f"gpt://{CATALOG_ID}/yandexgpt/rc"

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YandexGPT
def generate_text(user_description):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {IAM_TOKEN}"
    }
    prompt = {
        "modelUri": MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "system",
                "text": (
                    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ MatrixCRM. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π CRM-—Å–∏—Å—Ç–µ–º—ã. "
                    "–°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—ë–º–Ω—ã–º–∏, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏. "
                    "–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —è—Ä–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —ç–º–æ–¥–∑–∏, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Matrix CRM!'. "
                    "–î–∞–ª–µ–µ –∏–¥—ë—Ç –∫—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—è—Å–Ω—è—é—â–µ–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫–∞–∫ –æ–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–º–∞–π–ª–æ–º, "
                    "–∞ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. "
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MatrixCRM. "
                    "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π —Ö—ç—à—Ç–µ–≥–∏: #MatrixCRM #–û–±–Ω–æ–≤–ª–µ–Ω–∏—è #–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–ö–ª–∏–µ–Ω—Ç–∞–º–∏ #–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
                )
            },
            {
                "role": "user",
                "text": user_description
            }
        ]
    }
    response = requests.post(url, headers=headers, json=prompt)
    if response.status_code == 200:
        return response.json()["result"]["alternatives"][0]["message"]["text"]
    else:
        return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è CRM:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_description = update.message.text
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
    generated_text = generate_text(user_description)
    keyboard = [
        [InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve")],
        [InlineKeyboardButton("–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data["last_description"] = user_description
    context.user_data["generated_text"] = generated_text
    await update.message.reply_text(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{generated_text}", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "approve":
        await query.edit_message_text(f"‚úÖ –¢–µ–∫—Å—Ç —É—Ç–≤–µ—Ä–∂–¥—ë–Ω:\n\n{context.user_data['generated_text']}")
    elif query.data == "regenerate":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        context.user_data["waiting_for_regeneration"] = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def regenerate_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_regeneration"):
        user_description = update.message.text
        await update.message.reply_text("–†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        generated_text = generate_text(user_description)
        keyboard = [
            [InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve")],
            [InlineKeyboardButton("–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.user_data["generated_text"] = generated_text
        context.user_data["waiting_for_regeneration"] = False
        await update.message.reply_text(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{generated_text}", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT, regenerate_message))

    app.run_polling()

if __name__ == "__main__":
    main()
